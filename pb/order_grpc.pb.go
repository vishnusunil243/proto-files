// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: order.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	OrderAll(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	UserCancelOrder(ctx context.Context, in *OrderResponse, opts ...grpc.CallOption) (*OrderResponse, error)
	ChangeOrderStatus(ctx context.Context, in *ChangeOrderStatusRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	GetAllOrdersUser(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (OrderService_GetAllOrdersUserClient, error)
	GetAllOrders(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (OrderService_GetAllOrdersClient, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) OrderAll(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/OrderAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UserCancelOrder(ctx context.Context, in *OrderResponse, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/UserCancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ChangeOrderStatus(ctx context.Context, in *ChangeOrderStatusRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/ChangeOrderStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetAllOrdersUser(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (OrderService_GetAllOrdersUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderService_ServiceDesc.Streams[0], "/order.OrderService/GetAllOrdersUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderServiceGetAllOrdersUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderService_GetAllOrdersUserClient interface {
	Recv() (*GetAllOrderResponse, error)
	grpc.ClientStream
}

type orderServiceGetAllOrdersUserClient struct {
	grpc.ClientStream
}

func (x *orderServiceGetAllOrdersUserClient) Recv() (*GetAllOrderResponse, error) {
	m := new(GetAllOrderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderServiceClient) GetAllOrders(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (OrderService_GetAllOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderService_ServiceDesc.Streams[1], "/order.OrderService/GetAllOrders", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderServiceGetAllOrdersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderService_GetAllOrdersClient interface {
	Recv() (*GetAllOrderResponse, error)
	grpc.ClientStream
}

type orderServiceGetAllOrdersClient struct {
	grpc.ClientStream
}

func (x *orderServiceGetAllOrdersClient) Recv() (*GetAllOrderResponse, error) {
	m := new(GetAllOrderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	OrderAll(context.Context, *OrderRequest) (*OrderResponse, error)
	UserCancelOrder(context.Context, *OrderResponse) (*OrderResponse, error)
	ChangeOrderStatus(context.Context, *ChangeOrderStatusRequest) (*OrderResponse, error)
	GetAllOrdersUser(*OrderRequest, OrderService_GetAllOrdersUserServer) error
	GetAllOrders(*NoParam, OrderService_GetAllOrdersServer) error
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) OrderAll(context.Context, *OrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderAll not implemented")
}
func (UnimplementedOrderServiceServer) UserCancelOrder(context.Context, *OrderResponse) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCancelOrder not implemented")
}
func (UnimplementedOrderServiceServer) ChangeOrderStatus(context.Context, *ChangeOrderStatusRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeOrderStatus not implemented")
}
func (UnimplementedOrderServiceServer) GetAllOrdersUser(*OrderRequest, OrderService_GetAllOrdersUserServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllOrdersUser not implemented")
}
func (UnimplementedOrderServiceServer) GetAllOrders(*NoParam, OrderService_GetAllOrdersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllOrders not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_OrderAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).OrderAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/OrderAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).OrderAll(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UserCancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UserCancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/UserCancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UserCancelOrder(ctx, req.(*OrderResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ChangeOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeOrderStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ChangeOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/ChangeOrderStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ChangeOrderStatus(ctx, req.(*ChangeOrderStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetAllOrdersUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrderRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderServiceServer).GetAllOrdersUser(m, &orderServiceGetAllOrdersUserServer{stream})
}

type OrderService_GetAllOrdersUserServer interface {
	Send(*GetAllOrderResponse) error
	grpc.ServerStream
}

type orderServiceGetAllOrdersUserServer struct {
	grpc.ServerStream
}

func (x *orderServiceGetAllOrdersUserServer) Send(m *GetAllOrderResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OrderService_GetAllOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderServiceServer).GetAllOrders(m, &orderServiceGetAllOrdersServer{stream})
}

type OrderService_GetAllOrdersServer interface {
	Send(*GetAllOrderResponse) error
	grpc.ServerStream
}

type orderServiceGetAllOrdersServer struct {
	grpc.ServerStream
}

func (x *orderServiceGetAllOrdersServer) Send(m *GetAllOrderResponse) error {
	return x.ServerStream.SendMsg(m)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrderAll",
			Handler:    _OrderService_OrderAll_Handler,
		},
		{
			MethodName: "UserCancelOrder",
			Handler:    _OrderService_UserCancelOrder_Handler,
		},
		{
			MethodName: "ChangeOrderStatus",
			Handler:    _OrderService_ChangeOrderStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllOrdersUser",
			Handler:       _OrderService_GetAllOrdersUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllOrders",
			Handler:       _OrderService_GetAllOrders_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "order.proto",
}
